---Terminal---
virtualenv -p /usr/bin/python3.4 vagenda --> Criar ambiente
cd vagenda --> Entrar dentro da pasta do ambiente
source bin/activate --> Ativar ambiente
pip install django -->Instalar django
django-admin startproject agenda . -->Criar projeto agenda, o ponto criar os arquivos na mesma pasta
./manage.py runserver --> Executar o servidor Web
./manage.py migrate --> Gerar as tabela(Sql) do admin

---Configurando o sublimetext3---
Copiar o script abaixo em View/Show Console e Enter

import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 

control shif P
--> install package
    html5
    django
    djaneiro
--> remove package

---Terminal---
---Criando a aplicação contatos---
cd agenda --> Entrar dentro da agenda
../manage.py startapp contatos --> Criar aplicação contatos

---Sublime---
Abrir a pasta do projeto
Criar a classe[Contato] no arquivo models.py
class Contato(models.Model):
	nome = models.CharField(max_length=100)
	email = models.CharField(max_length=100)
	telefone = models.CharField(max_length=14)

	def  __str__(self):
		return self.nome

---Terminal---
../manage.py makemigrations --> Preparar os models para geração dos SQL
../manage.py migrate --> Gerar as tabela(Sql) de contato

---Sublime---
Abrir o arquivo admin.py e editar o código abaixo:
from .models import Contato

# Register your models here.

#@admin.register(Contato)
class ContatoAdmin(admin.ModelAdmin):
	list_display = ('nome','email','telefone','sexo','cidade')
	search_fields = ('nome','email')

admin.site.register(Contato, ContatoAdmin)

---Terminal---
../manage.py createsuperuser --> Criar um super usuario para acessar o admin da aplicação
../manage.py runserver --> Executar o servidor Web

---Terminal---
Criando nova aplicação para controle
../manage.py startapp core -->

---Sublime---
Criar a pasta template no core
criar o arquivo index.html com texto abaixo:
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title></title>
	<link rel="stylesheet" href="">
</head>
<body>
<h1>Bem Vindo!</h1>
<a href="{% url 'addcontato' %}" title="">Cadastrar Contato</a><br>
<a href="{% url 'listacontatos' %}" title="">Listar Contato</a>
</body>
</html>

---Editar o arquivo views.py do core como abaixo:
def home(request):
	return render(request, 'index.html')

---Editar o arquivo urls.py do core como abaixo:
from django.conf.urls import include, url
from django.contrib import admin

from agenda.core.views import home

urlpatterns = [
    url(r'^$', home, name='home'),
    url(r'^admin/', include(admin.site.urls)),
]

---Sublime--- 15/08/2015
Criar arquivo forms.py no diretorio contatos
Editar arquivo forms.py

from django import forms

from .models import Contato

class ContatoForm(forms.ModelForm):
	class Meta:
		model = Contato
		fields = ('nome','email','telefone','sexo','cidade') #Mostra os campo na visualizacao html
		#exclude = ('nome',) //Excluir os campo na visualizacao html

---Criar uma pasta templates no diretorio contatos e criar um arquivo add_contato.html---
---Editar o arquivos add_contato.html---

<!DOCTYPE html>
<html>
<head>
	<title>Adicionar novo Contato</title>
	<meta charset="utf-8">
</head>
<body>
<h1>Novo Contato</h1>
<form action="" method="post" accept-charset="utf-8">
{% csrf_token %}
	{{ form_contato.as_p }}
	<input type="submit" name="" value="Salvar Contato">
</form>	
</body>
</html>

---Editar view.py de contatos---
#formaularios html tem dois tipos de submissao POST[invisivel] ou GET[envio url, tem limite]

from django.shortcuts import render, redirect
from django.core.urlresolvers import reverse

from .forms import ContatoForm
# Create your views here.

def add_contato(request):
	if request.method == 'POST':
		form_contato = ContatoForm(request.POST)
		if form_contato.is_valid():
			form_contato.save()
			return redirect(reverse('sucesso'))
		else:
			print(form_contato.errors)
	else:
		form_contato = ContatoForm()
	return render(request, 'add_contato.html', {'form_contato': form_contato})

def cadastro_sucesso(request):
	return render(request, 'sucesso.html')

---Editar urls.py e adicionar o codigo abaixo:---
from agenda.contatos.views import add_contato
from agenda.contatos.views import cadastro_sucesso

url(r'^adicionar-contato/$', add_contato, name='addcontato'),
url(r'^sucesso/$', cadastro_sucesso, name='sucesso'),

---Criar arquivo sucesso.html---
<!DOCTYPE html>
<html>from agenda.contatos.views import cadastro_sucesso
<head>
	<title>Sucesso</title>
	<meta charset="utf-8">
</head>
<body>
<h1>Cadastro efetuado com sucesso!</h1>
<a href="{% url 'addcontato' %}" title="">Efetuar novo Cadastro</a>
</body>
</html>

---Listar contatos---
Criar arquivo lista_contatos.html na pasta contatos/templates
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Listagem de Contatos</title>
</head>
<body>
<h1>Contatos</h1>
<table>
	<caption>Meus Contatos</caption>
	<thead>
		<tr>
			<th>ID</th>
			<th>Nome</th>
			<th>Telefone</th>
			<th>Email</th>
			<th>Sexo</th>
			<th>Cidade</th>
			<th colspan="2">Açoes</th>
		</tr>
	</thead>
	<tbody>
	{% for c in contatos %}
		<tr>
			<td>{{ c.id }}</td>
			<td>{{ c.nome }}</td>
			<td>{{ c.telefone }}</td>
			<td>{{ c.email }}</td>
			<td>{{ c.sexo }}</td>
			<td>{{ c.cidade }}</td>
			<td><a href="">Editar</a></td>
			<td><a href="{% url 'apagarcontatos' c.id %}">Apagar</a></td>
		</tr>
	{% endfor %}
	</tbody>
</table>
</body>
</html>

---Editar urls.py e adicionar o codigo abaixo:---
from agenda.contatos.views import lista_contatos
from agenda.contatos.views import apagar_contato

url(r'^lista-contatos/$', lista_contatos, name='listacontatos'),
url(r'^deletar-contatos/(?P<id>\d+)/$', apagar_contato, name='apagarcontatos'),

---Editar views.py e adicionar o codigo abaixo:---
from .models import Contato
def lista_contatos(request)	:
	contatos = Contato.objects.all()[:15] # [:15] --> numero de registro a ser visualizado, objects e igual a select * from tabela
	return render(request, 'lista_contatos.html', {'contatos': contatos})

def apagar_contato(request, id):
	contato = Contato.objects.get(id=id).delete()
	return redirect(reverse('listacontatos'))

---Editar views.py de contatos---
def editar_contato(request,id):
	contato = Contato.objects.get(id=id)
	if request.method == 'POST':
		form_contato = ContatoForm(request.POST, instance=contato)
		if form_contato.is_valid:
			form_contato.save()
			return redirect(reverse('listacontatos'))
		else:
			print(form_contato.errors)
	else:
		form_contato = ContatoForm(instance=contato)
	return render(request, 'editar_contato.html',{'form_contato':form_contato})

---Editar urls.py---
from agenda.contatos.views import editar_contato
url(r'^editar-contatos/(?P<id>\d+)/$', editar_contato, name='editarcontatos'),

---Editar lista_contatos.py de templates contatos---
<td><a href="{% url 'editarcontatos' c.id %}">Editar</a></td>

---Criar arquivo editar_contato.html em contatos/templates---
<!DOCTYPE html>
<html>
<head>
	<title>Adicionar novo Contato</title>
	<meta charset="utf-8">
</head>
<body>
<h1>Editar Contato</h1>
<form action="" method="post" accept-charset="utf-8">
{% csrf_token %}
	{{ form_contato.as_p }}
	<input type="submit" name="" value="Salvar Contato">
</form>	
</body>
</html>



